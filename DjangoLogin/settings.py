"""
Django settings for DjangoLogin project.

Generated by 'django-admin startproject' using Django 2.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '3k$=$4$&%y!o1&hh#iqg=7h-e^=5*q3z3z19r9q9p3#^qs!^-b'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'LoginUser',
    'rest_framework',
    "djcelery",
    "LoginUser.templatetags"
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'DjangoLogin.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR,"templates")],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'DjangoLogin.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/ShangHai'

USE_I18N = True

USE_L10N = True

USE_TZ = False


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS=(os.path.join(BASE_DIR,"static"),)


#分页配置
REST_FRAMEWORK = {
    # 分页
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',  # LimitOffsetPagination 分页风格
    'PAGE_SIZE': 10,  # 每页多少条记录
}

#celery 配置
import djcelery
djcelery.setup_loader()#模块加载
#我们用的下标为1，即：第二个数据库
BROKER_URL="redis://127.0.0.1:6379/1"#指定broker的存储位置，我们用的是redis.中间人
CELERY_IMPORTS=("CeleryTask.tasks")  #指定任务文件,也就是我们编写任务的文件
#时区
CELERY_TIMEZONE="Asia/Shanghai"
#驱动
CELERYBEAT_SCHEDULER="djcelery.schedulers.DatabaseScheduler"

#定时任务
from celery.schedules import timedelta,crontab
CELERYBEAT_SCHEDULE ={
    "test01":{
        "task":"CeleryTask.tasks.TaskTest",#包下面的tasks文件的TaskTest任务
        "schedule":timedelta(seconds=5) #每20s执行一次
    },
}

"""
from celery.schedules import crontab

    CELERYBEAT_SCHEDULE = {
        'sum-task': {
            'task': 'deploy.tasks.add',
            'schedule':  timedelta(seconds=20),
        }
        'send-report': {
            'task': 'deploy.tasks.report',
            'schedule': crontab(hour=4, minute=30, day_of_week=1),
        }
    }
定义了两个task：

名字为'sum-task'的task，每20秒执行一次add函数，并传了两个参数5和6
名字为'send-report'的task，每周一早上4：30执行report函数
timedelta是datetime中的一个对象，需要from datetime import timedelta引入，有如下几个参数

days：天
seconds：秒
microseconds：微妙
milliseconds：毫秒
minutes：分
hours：小时
crontab的参数有：

month_of_year：月份
day_of_month：日期
day_of_week：周
hour：小时
minute：分钟
"""


#缓存全局配置
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.memcached.MemcachedCache',
        "LOCATION":["127.0.0.1:11211"]#使用本地的memcach缓存
    }
}